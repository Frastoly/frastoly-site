// Global deƒüi≈ükenler
let terminal;
let game;

// Sayfa y√ºklendiƒüinde
document.addEventListener('DOMContentLoaded', () => {
    terminal = new Terminal();
    window.terminal = terminal; // Terminal nesnesini global scope'a ekle
    game = new Game(terminal);
    terminal.game = game;
});

class Game {
    constructor(terminalInstance) {
        this.player = {
            level: 1,
            xp: 0,
            money: 1000,
            reputation: 0,
            skills: {
                hacking: 1,
                networking: 1,
                cryptography: 1,
                socialEngineering: 1
            },
            tools: [],
            completedSteps: [],
            currentMission: null,
            decisionHistory: [],
            worldState: {
                globalChaosLevel: 0,
                corporateTrust: 50,
                cyberThreatLevel: 1
            }
        };

        this.missions = new Missions();
        this.terminal = terminalInstance;
        this.system = {
            security: 1,
            stealth: 1,
            speed: 1
        };
        
        // ƒ∞lk g√∂revi ba≈ülat
        this.startMission('ghost_protocol_intro');
    }

    startMission(missionId) {
        const mission = this.missions.getMission(missionId);
        if (!mission) return;

        // Eƒüer aynƒ± g√∂rev zaten aktifse, tekrar ba≈ülatma
        if (this.player.currentMission && this.player.currentMission.id === missionId) {
            return;
        }

        this.player.currentMission = mission;
        this.player.completedSteps = [];
        
        // G√∂rev ba≈ülangƒ±√ß mesajƒ±nƒ± g√∂ster
        this.terminal.write('\nüéØ Yeni G√∂rev Ba≈üladƒ±!', 'success');
        this.terminal.write('-------------------', 'info');
        this.terminal.write(`G√∂rev: ${mission.title}`, 'info');
        this.terminal.write(mission.description, 'info');
        this.terminal.write(`\nHedef: ${mission.target}`, 'info');
        this.terminal.write(`A√ßƒ±klama: ${mission.targetDescription}`, 'info');
        
        // Briefing mesajƒ±nƒ± g√∂ster
        if (mission.briefing) {
            this.terminal.write('\nüìã G√∂rev Brifingi:', 'info');
            this.terminal.write(mission.briefing, 'info');
        }
        
        this.terminal.write('\nG√∂rev Adƒ±mlarƒ±:', 'info');
        mission.steps.forEach(step => {
            this.terminal.write(`[ ] ${step}`, 'info');
        });
    }

    completeMission(missionId) {
        const mission = this.missions.getMission(missionId);
        if (!mission) return;

        // Eƒüer g√∂rev zaten tamamlandƒ±ysa, tekrar tamamlama
        if (!this.player.currentMission || this.player.currentMission.id !== missionId) {
            return;
        }

        // √ñd√ºlleri ver
        if (mission.reward) {
            this.player.xp += mission.reward.xp || 0;
            this.player.money += mission.reward.money || 0;
            this.player.reputation += mission.reward.reputation || 0;
        } else {
            // Alternatif √∂d√ºl anahtarlarƒ±
            this.player.xp += mission.experience || 0;
            if (mission.skillRewards) {
                Object.entries(mission.skillRewards).forEach(([skill, value]) => {
                    if (this.player.skills[skill] !== undefined) {
                        this.player.skills[skill] += value;
                    }
                });
            }
        }

        // Tamamlanma mesajƒ±nƒ± g√∂ster
        this.terminal.write('\nüéâ G√∂rev Tamamlandƒ±!', 'success');
        this.terminal.write('-------------------', 'info');
        this.terminal.write(`G√∂rev: ${mission.title}`, 'info');
        this.terminal.write(`Kazanƒ±lan XP: ${mission.reward ? mission.reward.xp : mission.experience || 0}`, 'info');
        this.terminal.write(`Kazanƒ±lan Para: $${mission.reward ? mission.reward.money : 0}`, 'info');
        this.terminal.write(`Kazanƒ±lan ƒ∞tibar: ${mission.reward ? mission.reward.reputation : 0}`, 'info');

        // Debriefing mesajƒ±nƒ± g√∂ster
        if (mission.debriefing) {
            this.terminal.write('\nüìã G√∂rev Deƒüerlendirmesi:', 'info');
            this.terminal.write(mission.debriefing, 'info');
        }

        // G√∂revi tamamlandƒ± olarak i≈üaretle
        this.player.currentMission = null;

        // Bir sonraki g√∂revi ba≈ülat
        const nextMission = this.missions.getNextMission(missionId);
        if (nextMission) {
            this.terminal.write('\nSistem y√ºkseltme se√ßeneklerini g√∂rmek i√ßin: system', 'info');
            setTimeout(() => this.startMission(nextMission.id), 3000);
        }
    }

    checkStep(step) {
        if (!this.player.currentMission) return false;

        const mission = this.player.currentMission;
        const normalize = str => str
            .toLowerCase()
            .replace(/ƒü/g, 'g')
            .replace(/√º/g, 'u')
            .replace(/≈ü/g, 's')
            .replace(/ƒ±/g, 'i')
            .replace(/√∂/g, 'o')
            .replace(/√ß/g, 'c')
            .replace(/√¢/g, 'a')
            .replace(/[^a-z0-9 ]/g, '');

        const stepMatch = mission.steps.find(s => {
            const trimmedStep = normalize(step.trim());
            const stepFirstWord = normalize(s.trim().split(' ')[0]);
            return stepFirstWord === trimmedStep && !this.player.completedSteps.includes(s);
        });

        if (stepMatch) {
            this.player.completedSteps.push(stepMatch);
            this.terminal.write(`\n‚úÖ Adƒ±m tamamlandƒ±: ${stepMatch}`, 'success');
            if (this.missions.isMissionComplete(mission.id, this.player.completedSteps)) {
                this.completeMission(mission.id);
            } else {
                this.terminal.write(`\nƒ∞lerleme: ${this.player.completedSteps.length}/${mission.steps.length}`, 'info');
            }
            return true;
        }
        return false;
    }

    updatePlayerInfo() {
        // Oyuncu seviyesi ve deneyim
        document.getElementById('player-level').textContent = this.player.level;
        document.getElementById('player-xp').textContent = this.player.xp;

        // Para
        let moneyElem = document.getElementById('player-money');
        if (!moneyElem) {
            const infoDiv = document.getElementById('player-info');
            moneyElem = document.createElement('p');
            moneyElem.innerHTML = 'Para: <span id="player-money">0</span>';
            infoDiv.appendChild(moneyElem);
        }
        document.getElementById('player-money').textContent = this.player.money;

        // Yetenekler
        document.getElementById('hacking-skill').textContent = this.player.skills.hacking;
        document.getElementById('networking-skill').textContent = this.player.skills.networking;
        document.getElementById('cryptography-skill').textContent = this.player.skills.cryptography;
    }

    buyTool(toolName, cost) {
        if (this.player.money >= cost) {
            this.player.money -= cost;
            this.player.tools.push(toolName);
            this.updatePlayerInfo();
            return true;
        }
        return false;
    }

    getAvailableTools() {
        return [
            { name: 'Geli≈ümi≈ü Port Tarayƒ±cƒ±', cost: 1000, description: 'Daha hƒ±zlƒ± ve detaylƒ± port taramasƒ± yapar' },
            { name: 'G√º√ßl√º Parola Kƒ±rƒ±cƒ±', cost: 2000, description: 'Brute-force saldƒ±rƒ±larƒ±nƒ± hƒ±zlandƒ±rƒ±r' },
            { name: 'Geli≈ümi≈ü ƒ∞z Gizleme', cost: 3000, description: 'ƒ∞zlerini daha iyi gizler' },
            { name: 'Sosyal M√ºhendislik Paketi', cost: 4000, description: 'Sosyal m√ºhendislik ba≈üarƒ± ≈üansƒ±nƒ± artƒ±rƒ±r' }
        ];
    }

    getDirtyJobs() {
        return [
            {
                name: "Rakip ≈üirketten veri sƒ±zdƒ±rma",
                description: "Hassas verileri √ßal ve sat",
                cost: 500,
                reward: 3000,
                reputationPenalty: 5,
                risk: 'high',
                requiredSkills: { hacking: 2, networking: 1 }
            },
            {
                name: "Sahte sosyal medya kampanyasƒ±",
                description: "Hedef ≈üirketin itibarƒ±nƒ± zedele",
                cost: 300,
                reward: 1500,
                reputationPenalty: 3,
                risk: 'medium',
                requiredSkills: { socialEngineering: 2 }
            },
            {
                name: "Kripto para manip√ºlasyonu",
                description: "Piyasayƒ± manip√ºle et ve k√¢r et",
                cost: 1000,
                reward: 5000,
                reputationPenalty: 8,
                risk: 'high',
                requiredSkills: { cryptography: 3 }
            }
        ];
    }

    performDirtyJob(jobId) {
        const job = this.getDirtyJobs().find(j => j.name === jobId);
        if (!job) {
            this.terminal.write('‚ùå Ge√ßersiz i≈ü!', 'error');
            return false;
        }

        // Yetenek kontrol√º
        const hasRequiredSkills = Object.entries(job.requiredSkills).every(
            ([skill, level]) => this.player.skills[skill] >= level
        );

        if (!hasRequiredSkills) {
            this.terminal.write('‚ùå Bu i≈ü i√ßin yeterli yeteneƒüin yok!', 'error');
            return false;
        }

        // Para kontrol√º
        if (this.player.money < job.cost) {
            this.terminal.write('‚ùå Yeterli paran yok!', 'error');
            return false;
        }

        // ƒ∞≈üi ger√ßekle≈ütir
        this.player.money -= job.cost;
        this.player.money += job.reward;
        this.player.reputation -= job.reputationPenalty;
        this.player.worldState.globalChaosLevel += job.risk === 'high' ? 5 : 2;

        // Sonu√ßlarƒ± g√∂ster
        this.terminal.write(`\nüí∞ Kirli i≈ü tamamlandƒ±!`, 'warning');
        this.terminal.write(`Kazanƒ±lan para: $${job.reward}`, 'success');
        this.terminal.write(`ƒ∞tibar kaybƒ±: ${job.reputationPenalty}`, 'error');
        this.terminal.write(`D√ºnya kaos seviyesi: +${job.risk === 'high' ? 5 : 2}`, 'warning');

        // Karar ge√ßmi≈üine ekle
        this.player.decisionHistory.push({
            type: 'dirty_job',
            job: job.name,
            outcome: {
                money: job.reward,
                reputation: -job.reputationPenalty,
                risk: job.risk
            },
            timestamp: new Date().toISOString()
        });

        this.updatePlayerInfo();
        return true;
    }

    makeDecision(decisionData) {
        const { description, options } = decisionData;
        
        // Karar men√ºs√ºn√º g√∂ster
        this.terminal.write('\nü§î Karar Zamanƒ±!', 'info');
        this.terminal.write('-------------------', 'info');
        this.terminal.write(description, 'info');
        this.terminal.write('\nSe√ßenekler:', 'info');
        
        options.forEach((option, index) => {
            this.terminal.write(`${index + 1}. ${option.text}`, 'info');
        });

        // Kararƒ± kaydet
        this.player.decisionHistory.push({
            description,
            timestamp: new Date().toISOString(),
            pending: true
        });

        // Kararƒ±n sonu√ßlarƒ±nƒ± uygula
        return new Promise((resolve) => {
            const handleDecision = (choice) => {
                const selectedOption = options[choice - 1];
                if (selectedOption) {
                    this.applyDecisionConsequences(selectedOption);
                    this.player.decisionHistory[this.player.decisionHistory.length - 1].outcome = selectedOption;
                    this.player.decisionHistory[this.player.decisionHistory.length - 1].pending = false;
                    resolve(selectedOption);
                }
            };

            // Karar se√ßimini dinle
            this.terminal.onDecisionSelect(handleDecision);
        });
    }

    applyDecisionConsequences(option) {
        const { consequences } = option;
        
        // Para deƒüi≈üimi
        if (consequences.money) {
            this.player.money += consequences.money;
            this.terminal.write(`üí∞ Para: ${consequences.money > 0 ? '+' : ''}${consequences.money}`, 
                consequences.money > 0 ? 'success' : 'error');
        }

        // ƒ∞tibar deƒüi≈üimi
        if (consequences.reputation) {
            this.player.reputation += consequences.reputation;
            this.terminal.write(`üåü ƒ∞tibar: ${consequences.reputation > 0 ? '+' : ''}${consequences.reputation}`,
                consequences.reputation > 0 ? 'success' : 'error');
        }

        // Risk durumu
        if (consequences.risk === 'high') {
            this.player.worldState.globalChaosLevel += 5;
            this.terminal.write('‚ö†Ô∏è Y√ºksek riskli karar! D√ºnya kaos seviyesi arttƒ±.', 'warning');
        }

        this.updatePlayerInfo();
    }

    checkGameEnding() {
        const { reputation, worldState } = this.player;
        
        if (reputation > 50 && worldState.globalChaosLevel < 10) {
            return {
                type: 'good',
                message: 'ƒ∞yi Son: D√ºnyayƒ± kurtardƒ±n ve Ghost Protocol efsanesi oldun!'
            };
        } else if (reputation > 20) {
            return {
                type: 'neutral',
                message: 'N√∂tr Son: D√ºnya belirsizlik i√ßinde, ancak hayatta kalmayƒ± ba≈üardƒ±n.'
            };
        } else {
            return {
                type: 'bad',
                message: 'K√∂t√º Son: Kaos yarattƒ±n ve sonunda Ghost Protocol seni dƒ±≈üladƒ±!'
            };
        }
    }
} 